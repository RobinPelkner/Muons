import numpy as np 
import matplotlib.pyplot as plt 
from scipy.optimize import curve_fit
import scipy.stats
def linear(x, a, b):
    return a*x +b

channels = np.zeros((16, 13))
times = np.array([0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 4.8, 4.7, 4.7, 4.6]) *1000
for i in range(1, 14):
    temp = np.loadtxt("prelimdata/calib-tdc" + str(i) + ".txt", delimiter="	", skiprows=0, unpack= True) 
    for k in range(0, 16):
        channels[k][i-1] = np.mean(temp[k])
conv_fac = np.empty((16,2))
print("Channel 0")        
plt.scatter(times, channels[:][0], label='Measured Data')
plt.errorbar(times, channels[:][0], yerr=np.sqrt(channels[:][0]), fmt='o', capsize=4.0)
params, covariance_matrix = curve_fit(linear, times, channels[:][0])
print(params, np.sqrt(np.diag(covariance_matrix)))
conv_fac[0] = params
plt.plot(times, linear(times, *params), "-", label='Linear Fit')
print(scipy.stats.chisquare(channels[:][0], f_exp=linear(times, *params), ddof=11))
plt.xlabel(r'Time / µs')
plt.ylabel(r'TDC Time')
plt.tight_layout()
plt.grid(alpha=0.5)
plt.savefig('plots/tdc0.pdf')
plt.clf()

print("Channel 1")        
plt.scatter(times, channels[:][1], label='Measured Data')
plt.errorbar(times, channels[:][1], yerr=np.sqrt(channels[:][1]), fmt='o', capsize=4.0)
params, covariance_matrix = curve_fit(linear, times, channels[:][1])
print(params, np.sqrt(np.diag(covariance_matrix)))
conv_fac[1] = params
plt.plot(times, linear(times, *params), "-", label='Linear Fit')
print(scipy.stats.chisquare(channels[:][1], f_exp=linear(times, *params), ddof=11))
plt.xlabel(r'Time / µs')
plt.ylabel(r'TDC Time')
plt.tight_layout()
plt.grid(alpha=0.5)
plt.savefig('plots/tdc1.pdf')
plt.clf()

print("Channel 2")        
plt.scatter(times, channels[:][2], label='Measured Data')
plt.errorbar(times, channels[:][2], yerr=np.sqrt(channels[:][2]), fmt='o', capsize=4.0)
params, covariance_matrix = curve_fit(linear, times, channels[:][2])
print(params, np.sqrt(np.diag(covariance_matrix)))
conv_fac[2] = params
plt.plot(times, linear(times, *params), "-", label='Linear Fit')
print(scipy.stats.chisquare(channels[:][2], f_exp=linear(times, *params), ddof=11))
plt.xlabel(r'Time / µs')
plt.ylabel(r'TDC Time')
plt.tight_layout()
plt.grid(alpha=0.5)
plt.savefig('plots/tdc2.pdf')
plt.clf()

print("Channel 3")        
plt.scatter(times, channels[:][3], label='Measured Data')
plt.errorbar(times, channels[:][3], yerr=np.sqrt(channels[:][3]), fmt='o', capsize=4.0)
params, covariance_matrix = curve_fit(linear, times, channels[:][3])
print(params, np.sqrt(np.diag(covariance_matrix)))
conv_fac[3] = params
plt.plot(times, linear(times, *params), "-", label='Linear Fit')
print(scipy.stats.chisquare(channels[:][3], f_exp=linear(times, *params), ddof=11))
plt.xlabel(r'Time / µs')
plt.ylabel(r'TDC Time')
plt.tight_layout()
plt.grid(alpha=0.5)
plt.savefig('plots/tdc3.pdf')
plt.clf()

print("Channel 4")        
plt.scatter(times, channels[:][4], label='Measured Data')
plt.errorbar(times, channels[:][4], yerr=np.sqrt(channels[:][4]), fmt='o', capsize=4.0)
params, covariance_matrix = curve_fit(linear, times, channels[:][4])
print(params, np.sqrt(np.diag(covariance_matrix)))
conv_fac[4] = params
plt.plot(times, linear(times, *params), "-", label='Linear Fit')
print(scipy.stats.chisquare(channels[:][4], f_exp=linear(times, *params), ddof=11))
plt.xlabel(r'Time / µs')
plt.ylabel(r'TDC Time')
plt.tight_layout()
plt.grid(alpha=0.5)
plt.savefig('plots/tdc4.pdf')
plt.clf()

print("Channel 5")        
plt.scatter(times, channels[:][5], label='Measured Data')
plt.errorbar(times, channels[:][5], yerr=np.sqrt(channels[:][5]), fmt='o', capsize=4.0)
params, covariance_matrix = curve_fit(linear, times, channels[:][5])
print(params, np.sqrt(np.diag(covariance_matrix)))
conv_fac[5] = params
plt.plot(times, linear(times, *params), "-", label='Linear Fit')
print(scipy.stats.chisquare(channels[:][5], f_exp=linear(times, *params), ddof=11))
plt.xlabel(r'Time / µs')
plt.ylabel(r'TDC Time')
plt.tight_layout()
plt.grid(alpha=0.5)
plt.savefig('plots/tdc5.pdf')
plt.clf()

print("Channel 6")        
plt.scatter(times, channels[:][6], label='Measured Data')
plt.errorbar(times, channels[:][6], yerr=np.sqrt(channels[:][6]), fmt='o', capsize=4.0)
params, covariance_matrix = curve_fit(linear, times, channels[:][6])
print(params, np.sqrt(np.diag(covariance_matrix)))
conv_fac[6] = params
plt.plot(times, linear(times, *params), "-", label='Linear Fit')
print(scipy.stats.chisquare(channels[:][6], f_exp=linear(times, *params), ddof=11))
plt.xlabel(r'Time / µs')
plt.ylabel(r'TDC Time')
plt.tight_layout()
plt.grid(alpha=0.5)
plt.savefig('plots/tdc6.pdf')
plt.clf()

print("Channel 7")        
plt.scatter(times, channels[:][7], label='Measured Data')
plt.errorbar(times, channels[:][7], yerr=np.sqrt(channels[:][7]), fmt='o', capsize=4.0)
params, covariance_matrix = curve_fit(linear, times, channels[:][7])
print(params, np.sqrt(np.diag(covariance_matrix)))
conv_fac[7] = params
plt.plot(times, linear(times, *params), "-", label='Linear Fit')
print(scipy.stats.chisquare(channels[:][7], f_exp=linear(times, *params), ddof=11))
plt.xlabel(r'Time / µs')
plt.ylabel(r'TDC Time')
plt.tight_layout()
plt.grid(alpha=0.5)
plt.savefig('plots/tdc7.pdf')
plt.clf()

print("Channel 8")  
chan_mod = channels[:][8]
chan_mod = np.delete(chan_mod, [9, 10, 11])
times_mod = np.delete(times, [9, 10, 11])
plt.scatter(times_mod, chan_mod, label='Measured Data')
plt.errorbar(times_mod, chan_mod, yerr=np.sqrt(chan_mod), fmt='o', capsize=4.0)
params, covariance_matrix = curve_fit(linear, times_mod, chan_mod)
print(params, np.sqrt(np.diag(covariance_matrix)))
conv_fac[8] = params
plt.plot(times_mod, linear(times_mod, *params), "-", label='Linear Fit')
print(scipy.stats.chisquare(chan_mod, f_exp=linear(times_mod, *params), ddof=8))
plt.xlabel(r'Time / µs')
plt.ylabel(r'TDC Time')
plt.tight_layout()
plt.grid(alpha=0.5)
plt.savefig('plots/tdc8.pdf')
plt.clf()

print("Channel 9")        
chan_mod = np.delete(channels[:][9], [7, 8, 9, 10, 11, 12])
times_mod = np.delete(times, [7, 8, 9, 10, 11, 12])
plt.scatter(times_mod, chan_mod, label='Measured Data')
plt.errorbar(times_mod, chan_mod, yerr=np.sqrt(chan_mod), fmt='o', capsize=4.0)
params, covariance_matrix = curve_fit(linear, times_mod, chan_mod)
conv_fac[9] = params
print(params, np.sqrt(np.diag(covariance_matrix)))
plt.plot(times_mod, linear(times_mod, *params), "-", label='Linear Fit')
print(scipy.stats.chisquare(chan_mod, f_exp=linear(times_mod, *params), ddof=5))
plt.xlabel(r'Time / µs')
plt.ylabel(r'TDC Time')
plt.tight_layout()
plt.grid(alpha=0.5)
plt.savefig('plots/tdc9.pdf')
plt.clf()

print("Channel 10")  
chan_mod = np.delete(channels[:][10], [9, 10, 11])
times_mod = np.delete(times, [9, 10, 11])
plt.scatter(times_mod, chan_mod, label='Measured Data')
plt.errorbar(times_mod, chan_mod, yerr=np.sqrt(chan_mod), fmt='o', capsize=4.0)
params, covariance_matrix = curve_fit(linear, times_mod, chan_mod)
conv_fac[10] = params
print(params, np.sqrt(np.diag(covariance_matrix)))
plt.plot(times_mod, linear(times_mod, *params), "-", label='Linear Fit')
print(scipy.stats.chisquare(chan_mod, f_exp=linear(times_mod, *params), ddof=8))
plt.xlabel(r'Time / µs')
plt.ylabel(r'TDC Time')
plt.tight_layout()
plt.grid(alpha=0.5)
plt.savefig('plots/tdc10.pdf')
plt.clf()

print("Channel 11")    
chan_mod = np.delete(channels[:][11], [9, 11])
times_mod = np.delete(times, [9, 11])
plt.scatter(times_mod, chan_mod, label='Measured Data')
plt.errorbar(times_mod, chan_mod, yerr=np.sqrt(chan_mod), fmt='o', capsize=4.0)
params, covariance_matrix = curve_fit(linear, times_mod, chan_mod)
print(params, np.sqrt(np.diag(covariance_matrix)))
conv_fac[11] = params
plt.plot(times_mod, linear(times_mod, *params), "-", label='Linear Fit')
print(scipy.stats.chisquare(chan_mod, f_exp=linear(times_mod, *params), ddof=9))
plt.xlabel(r'Time / µs')
plt.ylabel(r'TDC Time')
plt.tight_layout()
plt.grid(alpha=0.5)
plt.savefig('plots/tdc11.pdf')
plt.clf()

print("Channel 12")        
plt.scatter(times, channels[:][12], label='Measured Data')
plt.errorbar(times, channels[:][12], yerr=np.sqrt(channels[:][12]), fmt='o', capsize=4.0)
params, covariance_matrix = curve_fit(linear, times, channels[:][12])
print(params, np.sqrt(np.diag(covariance_matrix)))
conv_fac[12] = params
plt.plot(times, linear(times, *params), "-", label='Linear Fit')
print(scipy.stats.chisquare(channels[:][12], f_exp=linear(times, *params), ddof=11))
plt.xlabel(r'Time / µs')
plt.ylabel(r'TDC Time')
plt.tight_layout()
plt.grid(alpha=0.5)
plt.savefig('plots/tdc12.pdf')
plt.clf()

print("Channel 13")         
chan_mod = np.delete(channels[:][13], [9])
times_mod = np.delete(times, [9])
plt.scatter(times_mod, chan_mod, label='Measured Data')
plt.errorbar(times_mod, chan_mod, yerr=np.sqrt(chan_mod), fmt='o', capsize=4.0)
params, covariance_matrix = curve_fit(linear, times_mod, chan_mod)
print(params, np.sqrt(np.diag(covariance_matrix)))
conv_fac[13] = params
plt.plot(times_mod, linear(times_mod, *params), "-", label='Linear Fit')
print(scipy.stats.chisquare(chan_mod, f_exp=linear(times_mod, *params), ddof=10))
plt.xlabel(r'Time / µs')
plt.ylabel(r'TDC Time')
plt.tight_layout()
plt.grid(alpha=0.5)
plt.savefig('plots/tdc13.pdf')
plt.clf()

print("Channel 14")       
chan_mod = np.delete(channels[:][14], [9, 10, 11, 12])
times_mod = np.delete(times, [9, 10, 11, 12])
plt.scatter(times_mod, chan_mod, label='Measured Data')
plt.errorbar(times_mod, chan_mod, yerr=np.sqrt(chan_mod), fmt='o', capsize=4.0)
params, covariance_matrix = curve_fit(linear, times_mod, chan_mod)
print(params, np.sqrt(np.diag(covariance_matrix)))
conv_fac[14] = params
plt.plot(times_mod, linear(times_mod, *params), "-", label='Linear Fit')
print(scipy.stats.chisquare(chan_mod, f_exp=linear(times_mod, *params), ddof=7))
plt.xlabel(r'Time / µs')
plt.ylabel(r'TDC Time')
plt.tight_layout()
plt.grid(alpha=0.5)
plt.savefig('plots/tdc14.pdf')
plt.clf()

print("Channel 15")       
chan_mod = np.delete(channels[:][15], [9, 10, 11])
times_mod = np.delete(times, [9, 10, 11])
plt.scatter(times_mod, chan_mod, label='Measured Data')
plt.errorbar(times_mod, chan_mod, yerr=np.sqrt(chan_mod), fmt='o', capsize=4.0)
params, covariance_matrix = curve_fit(linear, times_mod, chan_mod)
print(params, np.sqrt(np.diag(covariance_matrix)))
conv_fac[15] = params
plt.plot(times_mod, linear(times_mod, *params), "-", label='Linear Fit')
print(scipy.stats.chisquare(chan_mod, f_exp=linear(times_mod, *params), ddof=8))
plt.xlabel(r'Time / µs')
plt.ylabel(r'TDC Time')
plt.tight_layout()
plt.grid(alpha=0.5)
plt.savefig('plots/tdc15.pdf')
plt.clf()

print(conv_fac)
np.savetxt('prelimdata/conv.txt', conv_fac, delimiter=';')